{
  "err_no": 0,
  "err_msg": "success",
  "data": {
    "draft_id": "7374996265228894246",
    "article_draft": {
      "id": "7374996265228894246",
      "article_id": "7375006864055205928",
      "user_id": "4212984288912376",
      "category_id": "6809637767543259144",
      "tag_ids": [
        6809640528267706382,
        6809640407484334093
      ],
      "link_url": "",
      "cover_image": "",
      "is_gfw": 0,
      "title": "从零开始搭建前端项目（webpack+ts+vue）",
      "brief_content": "前言 目标 为了这个目标，我们需要做什么呢？我是拆分成两个目标 需处理的文件 scss/css文件。 js/json/ts/tsx文件。 vue单文件。 图片和字体以及其他静态资源。 需要支持的功能 ",
      "is_english": 0,
      "is_original": 1,
      "edit_type": 10,
      "html_content": "deprecated",
      "mark_content": "### 前言\n\u003e 不知道什么时候，搭建一个前端项目，慢慢成为了我的执念，总感觉不搭建一个，总是缺点什么（虽然日常根本用不到，因为公司都是用那些集成脚手架，从`vue-cli`再到`vite`），正是抱着这种心态，我写了这篇文章（从零开始搭建(基于`webpack5+`)，最后部署在`github`）。\n\n### 目标\n\u003e 满足日常的开发环境(`dev`)以及本地预览(`preview`)，和发布部署（`github pages`）。\n\n为了这个目标，我们需要做什么呢？我是拆分成两个目标\n### 需处理的文件\n1. `scss/css`文件。\n2. `js/json/ts/tsx`文件。\n3. `vue`单文件。\n4. 图片和字体以及其他静态资源。\n### 需要支持的功能\n1. 本地开发文件热更新。\n2. 多环境/设置环境变量。\n- 开发环境\n- 生产环境\n- 本地预览环境\n3. 分包构建时，不同的资源放入不同的文件夹。\n4. 第三方包打包时，分割成独立的文件。\n### 开始冲！！！\n### 代码实现\n### 1. 创建文件夹\n\n```cmd\nmkdir project\n```\n### 2. 生成`package.json`\n\n```cmd\nnpm init -y\n```\n### 3. 安装`webpack`、`webpack-cli`、`webpack-dev-server`\n\n```cmd\nnpm install --save-dev webpack webpack-cli webpack-dev-server\n```\n### 4. 现在项目已经搭建好了我们现在来分析下需处理的文件。\n- `scss/css`文件。\n- `js/json/ts/tsx`文件。\n- `vue`单文件。\n- 图片和字体以及其他静态资源。\n\n对于这些文件的处理，其实`webpack`都已经提供了相应的`loader`来处理。\n- `sass-loader`、`css-loader`、`style-loader`可以来处理`sass/css`文件。\n- `js`和`json`，`webpack`天然就支持，我们仅仅需要`babel-loader `来转化我们的`js（es6+`）,对于`ts/tsx`我们可以使用`@babel/preset-typescript`。\n- 至于`vue`单文件，我们可以使用`vue`官方提供的`vue-loader`来处理。\n- 最后在说静态资源，我们可以使用`webpack`的资源模块`（asset module）`来处理。\n\n下面来配置我们`webpack.common.js`\n\n```webpack.common.js\nconst { VueLoaderPlugin } = require(\"vue-loader\")\nconst { loader } = MiniCssExtractPlugin\nmodule.exports = (env) =\u003e {\n  return {\n    entry: \"./src/index.ts\",\n    plugins: [\n      new VueLoaderPlugin()\n    ],\n    resolve: {\n      extensions: [\".vue\", \".tsx\", \".ts\", \".js\"],\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.vue$/i,\n          use: [\"vue-loader\"],\n        },\n        {\n          test: /\\.s[ac]ss$/i,\n          use: [\n            env.mode === \"development\" ? \"style-loader\" : loader,\n            \"css-loader\",\n            \"sass-loader\",\n          ],\n        },\n        {\n          test: /\\.css$/i,\n          use: [\n            env.mode === \"development\" ? \"style-loader\" : loader,\n            \"css-loader\",\n            \"sass-loader\",\n          ],\n        },\n        {\n          test: /\\.(ts|tsx)?$/,\n          exclude: /(node_modules)/,\n          loader: \"babel-loader\",\n          options: {\n            presets: [\n              \"@babel/preset-env\",\n              [\n                \"@babel/preset-typescript\",\n                {\n                  allExtensions: true,\n                },\n              ],\n            ],\n          },\n        },\n        // 图片\n        {\n          test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n          type: \"asset/resource\"\n        },\n        // 字体\n        {\n          test: /\\.(woff|woff2|eot|ttf|otf)$/i,\n          type: \"asset/resource\"\n        },\n      ],\n    },\n  }\n}\n```\n针对`ts`还需要在项目根目录创建`tsconfig.json`\n\n```tsconfig.json\n{\n    \"compilerOptions\": {\n        \"outDir\": \"./docs/\",\n        \"noImplicitAny\": true,\n        \"module\": \"ESNext\",\n        \"target\": \"ES2020\",\n        \"jsx\": \"react\",\n        \"allowJs\": true,\n        \"moduleResolution\": \"node\",\n        \"allowSyntheticDefaultImports\": true,\n        \"esModuleInterop\": true,\n        \"baseUrl\": \"./\",\n        \"paths\": {\n            \"@/*\": [\n                \"src/*\"\n            ]\n        }\n    },\n    \"include\": [\n        \"src/**/*\",\n    ],\n    \"exclude\": [\n        \"node_modules\"\n    ]\n}\n```\n自此我们的第一个目标已经完成，继续冲！！！\n### 需要支持的功能\n1. 本地开发文件热更新。\n2. 多环境/设置环境变量。\n- 开发环境\n- 生产环境\n- 本地预览环境\n3. 分包构建时，不同的资源放入不同的文件夹。\n4. 第三方包打包时，分割成独立的文件。\n### 1. 本地开发文件热更新\n这个我们可以使用`webpack`提供的`webpack-dev-server`来完成。\n我们需要先配置`webpack.dev.js`\n\n```webpack-dev.js\nconst { merge } = require(\"webpack-merge\")\nconst webpack = require(\"webpack\")\nconst common = require(\"./webpack.common.js\")\nmodule.exports = merge(common({ mode: \"development\" }), {\n  mode: \"development\",\n  devServer: {\n    static: \"./docs\"\n  }\n})\n```\n然后配置`package.json`的`script`命令\n\n```cmd\n    \"start\": \"webpack serve --open --config webpack.dev.js\",\n```\n我先来解释下上面的那个配置项，意思是，它会在把打包的文件，放到docs文件夹下（**先说下这个为啥不用默认的dist文件夹，因为github page部署静态资源，它需要这个资源放在docs文件夹才可以,后面部署在详说**），这个文件夹是不可见的（存在内存中），并且默认部署在`localhost:8080`\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/356baa22714e46cf886bbe60a75a5bb2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=711\u0026h=162\u0026s=19136\u0026e=png\u0026b=fbf3d9)\n### 2. 多环境/设置环境变量\n其实所谓的多环境，其实都是差不多的，都是把资源打包到一个文件夹，无非是生产环境的代码更小。\n而对于环境变量的配置，我们可以使用`DefinePlugin`来设置，这是官网对这个插件的描述：\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/534b9caef7b24d85a185cad3dfe4ac19~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=709\u0026h=67\u0026s=4902\u0026e=png\u0026b=f8f8f8)\n\n下面我们来设置环境变量\n- ### 开发环境\n\n```webpack.dev.js\nconst { merge } = require(\"webpack-merge\")\nconst webpack = require(\"webpack\")\nconst common = require(\"./webpack.common.js\")\nmodule.exports = merge(common({ mode: \"development\" }), {\n  mode: \"development\",\n  devtool: \"inline-source-map\",\n  devServer: {\n    static: \"./docs\",\n    // 忽略编译错误\n    client: {\n      overlay: false,\n    },\n  },\n  plugins: [\n    // 定义环境变量\n    new webpack.DefinePlugin({\n      \"process.env\": {\n        NODE_ENV: JSON.stringify(\"development\"),\n        serverUrl: JSON.stringify(\"dev\"),\n        base: JSON.stringify(\"/base-dev\"),\n      },\n    }),\n  ],\n})\n\n```\n- ### 生产环境\n\n```webpack.prod.js\nconst webpack = require(\"webpack\")\nconst { merge } = require(\"webpack-merge\")\nconst common = require(\"./webpack.common.js\")\nmodule.exports = merge(common({ mode: \"production\" }), {\n  mode: \"production\",\n  plugins: [\n    new webpack.DefinePlugin({\n      \"process.env\": {\n        NODE_ENV: JSON.stringify(\"production\"),\n        serverUrl: JSON.stringify(\"pro\"),\n        base: JSON.stringify(\"/base-pro\"),\n      },\n    }),\n  ],\n})\n```\n- ### 本地预览环境\n这里我想的是本地预览环境，其实就是我们本地提供一个`node`服务，然后提供对`docs`这些静态资源的访问，所以思路就是：我们在提供`node`服务前，只要先行执行构建命令`npm run build`就行。这里我们使用`express`来搭建服务。\n\n```cmd\nnpm install --save-dev express open\n```\n`open`是一个打开链接/应用的插件，这里我们利用它打开`chrome`浏览器\n\n```server.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\napp.use(express.static('docs'))\napp.listen(port, () =\u003e {\n    import('open').then(res =\u003e {\n        res.default(` 本机的Ip:${port}`, { app: { name: 'chrome' } })\n    })\n})\n```\n然后修改`package.json`文件\n```package.json\n  \"scripts\": {\n    \"preview\": \"npm run build \u0026\u0026 node server.js\"\n  }\n```\n这样执行命令，我们就可以浏览器看到我们的项目了。\n### 3.  分包构建时，不同的资源放入不同的文件夹\n首先我们来分析下，我们最终打包生成的资源，无非就几种，js、css、静态资源（图片和字体），所以我们只需要针对不同的资源，做不同的配置即可。\n在`webpack.common.js`进行如下配置\n\n```webpack.commom.js\nconst path = require(\"path\")\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\")\nconst { loader } = MiniCssExtractPlugin\nmodule.exports = (env) =\u003e {\n  return {\n    entry: \"./src/index.ts\",\n    output: {\n    // 把js文件打包docs/js\n      filename: `js/[name].[hash].js`,\n      path: path.resolve(__dirname, \"docs\"),\n      clean: true,\n    },\n    plugins: [\n    // 把css文件打包docs/css\n      new MiniCssExtractPlugin({\n        filename: \"css/[name].[hash].css\",\n      }),\n    ],\n    module: {\n      rules: [\n        // 把图片打包到docs/assets\n        {\n          test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n          type: \"asset/resource\",\n          generator: {\n            publicPath: \"assets/\",\n            outputPath: \"assets/\",\n          },\n        },\n        // // 把字体打包到docs/assets\n        {\n          test: /\\.(woff|woff2|eot|ttf|otf)$/i,\n          type: \"asset/resource\",\n          generator: {\n            publicPath: \"assets/\",\n            outputPath: \"assets/\",\n          },\n        },\n      ],\n    },\n  }\n}\n```\n最后会生成如下目录结构:\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f0e5c76757f48668d9bc44aa757d229~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=298\u0026h=120\u0026s=2457\u0026e=png\u0026b=181818)\n\n### 4.  第三方包打包时，分割成独立的文件\n我们可以通过配置`optimization.splitChunks`，来分割文件\n\n```webpack.common.js\nmodule.exports = (env) =\u003e {\nreturn {\n    optimization: {\n      runtimeChunk: \"single\",\n      splitChunks: {\n        cacheGroups: {\n          vendors:\n            env.mode === \"development\"\n              ? {}\n              : {\n                chunks: \"all\",\n                test: /[\\\\/]node_modules[\\\\/]/,\n                name (module) {\n                  if (module.context.includes(\"node_modules\")) {\n                    const packageName = module.context.match(\n                      /[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/\n                    )[1]\n                    return `${packageName.replace(\"@\", \"\")}`\n                  }\n                },\n              },\n        },\n      }\n    }\n} \n}\n```\n至此我们的目标就完成了，下面我们说下怎么部署到`github`。\n### 部署\n大家都知道github本身是支持部署静态网站的，`GitHub Pages`，通过在这里配置，我们就可以有自己的静态网站。配置如下图：\n\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b14146102089435ea9d2af2029343eb7~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1509\u0026h=768\u0026s=102249\u0026e=png\u0026b=ffffff)\n第三步，可以看到这里指定资源是支持两种的`root/docs`，我们选择`docs`,这就是为啥，我们一开构建打包的时候，没有选择`dist`文件夹而是使用`docs`，这样设置之后，后面每次该分支上传代码，都会自动构建和部署（可以查看`action`）。\n### 总结\n至此我们的开发和部署目标就完成了，这个项目目前，本地开发编译有点慢，后续我再优化下，[这是代码](https://github.com/lzh-kf/manual-project)，以及[部署地址](https://lzh-kf.github.io/manual-project/)大家有兴趣，可以自己`clone`下来(切换到`master`分支，代码都在这个分支上) 本地玩玩，也可以部署到自己的`github`。",
      "ctime": "1717209347",
      "mtime": "1717230248",
      "status": 0,
      "original_type": 0,
      "theme_ids": []
    },
    "author_user_info": {
      "user_id": "4212984288912376",
      "user_name": "kf_007",
      "company": "",
      "job_title": "",
      "avatar_large": "https://p3-passport.byteacctimg.com/img/mosaic-legacy/3796/2975850990~300x300.image",
      "level": 2,
      "description": "",
      "followee_count": 17,
      "follower_count": 6,
      "post_article_count": 9,
      "digg_article_count": 5,
      "got_digg_count": 21,
      "got_view_count": 2192,
      "post_shortmsg_count": 1,
      "digg_shortmsg_count": 1,
      "isfollowed": false,
      "favorable_author": 0,
      "power": 277,
      "study_point": 0,
      "university": {
        "university_id": "0",
        "name": "",
        "logo": ""
      },
      "major": {
        "major_id": "0",
        "parent_id": "0",
        "name": ""
      },
      "student_status": 0,
      "select_event_count": 0,
      "select_online_course_count": 0,
      "identity": 0,
      "is_select_annual": false,
      "select_annual_rank": 0,
      "annual_list_type": 0,
      "extraMap": {},
      "is_logout": 0,
      "annual_info": [],
      "account_amount": 0,
      "user_growth_info": {
        "user_id": 4212984288912376,
        "jpower": 277,
        "jscore": 447.7,
        "jpower_level": 2,
        "jscore_level": 4,
        "jscore_title": "进阶掘友",
        "author_achievement_list": [],
        "vip_level": 0,
        "vip_title": "",
        "jscore_next_level_score": 500,
        "jscore_this_level_mini_score": 150,
        "vip_score": 0
      },
      "is_vip": false,
      "become_author_days": 0,
      "collection_set_article_count": 0,
      "recommend_article_count_daily": 0,
      "article_collect_count_daily": 0,
      "user_priv_info": {
        "administrator": 0,
        "builder": 0,
        "favorable_author": 0,
        "book_author": 0,
        "forbidden_words": 0,
        "can_tag_cnt": 0,
        "auto_recommend": 0,
        "signed_author": 0,
        "popular_author": 0,
        "can_add_video": 0
      }
    },
    "category": {
      "category_id": "6809637767543259144",
      "category_name": "前端",
      "category_url": "frontend",
      "rank": 2,
      "back_ground": "https://lc-mhke0kuv.cn-n1.lcfile.com/8c95587526f346c0.png",
      "icon": "https://lc-mhke0kuv.cn-n1.lcfile.com/1c40f5eaba561e32.png",
      "ctime": 1457483942,
      "mtime": 1432503190,
      "show_type": 3,
      "item_type": 2,
      "promote_tag_cap": 4,
      "promote_priority": 2
    },
    "tags": [
      {
        "id": 2546614,
        "tag_id": "6809640528267706382",
        "tag_name": "Webpack",
        "color": "#6F94DB",
        "icon": "https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/leancloud-assets/73e856b07f83b4231c1e.png~tplv-t2oaga2asx-image.image",
        "back_ground": "",
        "show_navi": 0,
        "ctime": 1440920866,
        "mtime": 1718193338,
        "id_type": 9,
        "tag_alias": "",
        "post_article_count": 10554,
        "concern_user_count": 254899
      },
      {
        "id": 2546526,
        "tag_id": "6809640407484334093",
        "tag_name": "前端",
        "color": "#60ADFF",
        "icon": "https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/leancloud-assets/bac28828a49181c34110.png~tplv-t2oaga2asx-image.image",
        "back_ground": "",
        "show_navi": 1,
        "ctime": 1435971546,
        "mtime": 1718197200,
        "id_type": 9,
        "tag_alias": "",
        "post_article_count": 478040,
        "concern_user_count": 686057
      }
    ],
    "user_interact": {
      "omitempty": 0,
      "user_id": 0,
      "is_digg": false,
      "is_follow": false,
      "is_collect": false,
      "collect_set_count": 0
    },
    "columns": [],
    "theme_list": []
  }
}